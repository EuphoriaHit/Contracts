// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

//This smart contract's code was copied and adopted from Biswap's impementation
//https://github.com/biswap-org/staking
//This contract combines MasterChef and AutoBSW contracts logic into one contract

contract Staking is Ownable{
    using SafeERC20 for IERC20;
    uint64 constant PRECISION = 1e12;
    uint16 constant FIVE_MINUTES_IN_DAY = 288;

    struct StakeHolder {
        uint256 stakes;
        uint256 shares; // number of stakes for a user
        //uint256 lastDepositedTime; // keeps track of deposited time for potential penalty
        //uint256 EuphAtLastUserAction; // keeps track of Euph deposited at the last user action
        //uint256 lastUserActionTime; // keeps track of the last user action time
    }

    struct PrivateStakeHolder {
        address privateAddress;
        uint256 initialStakes; // number of initial locked tokens staked
        uint256 lockedStakes;
        uint256 unlockPercentagePerMonth; //
        uint256 lastWithdrawPercent; // the 
    }

    modifier contractExpired() {
        if(totalStakes == 0) {
            timeInPause += _pauseSinceTime(lastRewardTime);
            lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
        }
        require(_isContractExpired(), "Staking: The staking contract is not yet expired");
        _;
    }

    modifier contractNotExpired() {
        if(totalStakes == 0) {
            timeInPause += _pauseSinceTime(lastRewardTime);
            lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
        }
        require(block.timestamp - timeInPause < (contractDurationInDays * 1 days + startDate), "Staking: The staking contract has already expired");
        _;
    }

    modifier contractStarted() {
        require(stakingStarted == true, "Staking: The staking contract has not started yet");
        _;
    }

    modifier contractNotStarted() {
        require(stakingStarted == false, "Staking: The staking contract has already started");
        _;
    }

    modifier notContract() {
        require(!_isContract(msg.sender), "contract not allowed");
        require(msg.sender == tx.origin, "proxy contract not allowed");
        _;
    }

    // <================================ CONSTRUCTOR AND INITIALIZER ================================>

    constructor(uint256 rewardSupply, uint16 durationInDays, address tokenAddress) {
        _setToken(tokenAddress);
        _setSupplyAndDuration(rewardSupply, durationInDays);
        privateUnlockPercent = 175e9; // 10%. Max is 1e12;
        initialPrivateUnlockPercent = 175e9;
    }

    function changeSupplyAndDuration(uint256 supplyPercentage, uint16 durationInDays) external onlyOwner contractNotStarted {
        _setSupplyAndDuration(supplyPercentage, durationInDays);
    }

    function changeToken(address newTokenAddress) external onlyOwner contractNotStarted{
        _setToken(newTokenAddress);
    }

    function initialize()
        external
        onlyOwner
        contractNotStarted
    {
        require(stakingStarted == false, "Staking: The staking contract has been already initialized");
        stakingStarted = true;
        startDate = block.timestamp - (block.timestamp % 1 days );
        transferTokensToContract(initialRewardSupply);
    }

    // <================================ END OF CONSTRUCTOR AND INITIALIZER ================================>
    IERC20 private token; // 
    bool private stakingStarted; // The boolean to check if the staking contract has been initialized and started the work process
    bool private distributionEnded; // This boolean is used to control the work of distribuiteRewards() function
    uint256 public contractDurationInDays; // Duration of contract in days
    uint256 public rewardsPerFiveMins; // Amount of tokens that will be distributed among all users in 1 Day 
    uint256 public initialRewardSupply; // Initial amount of tokens allocated for Staking contract use
    uint256 public startDate; // Timestamp of the start day of the contract
    uint256 public totalStakes;
    uint256 public totalShares; // Represents the total amount of staked Tokens
    uint256 public stakeHoldersCount; // Total number of stake holders (users)
    uint256 public privateStakeHoldersCount;
    uint256 public timeInPause; // Number of days with no active stakes. If there were no stakes on a specific day, then no reward is distributed and the duration of contract is extended to plus one day
    uint256 private rewardDebt; // userInfo[0].rewardDebt in Biswap's MasterStaking contract
    uint256 private providedTokens; // userInfo[0].amount in Biswap's MasterStaking contract
    uint256 private tempBalance; // Token balance of AutoBSW contract in Biswap implementation. tempBalance stands for temporary balance
    uint256 public totalSupply; // Token Balance of pool with pid 0 in Biswap's MasterStaking contract
    uint256 public depositedTokens; // depositedBsw in Biswap's MasterStaking contract
    uint256 private privateUnlockPercent; // this value is only used to track percentage, which allows user to unlock x% of their locked tokens. Initial value is 10%. It increments to 7.5% every month. Max is 100%
    uint256 private initialPrivateUnlockPercent; // Initial value of privateUnlockPercent that remains unchanged. Used for calculations

    mapping(address => PrivateStakeHolder) privateStakeHoldersInfo;
    mapping(address => StakeHolder) stakeHoldersInfo;
    uint256 lastRewardTime = 0; //Timestamp of last updatePool;
    uint256 accEuphPerShare = 0; // accBswPerShare variable in Biswap's MasterStaking contract

    // <================================ EVENTS ================================>
    event StakeCreated(address indexed stakeHolder, uint256 indexed stake);

    event UnStaked(address indexed stakeHolder, uint256 indexed withdrawAmount);

    event TokensTransferedToStakingBalance(address indexed sender, uint256 indexed amount);

    // <================================ EXTERNAL FUNCTIONS ================================>

    // <<<================================= GETTERS =================================>>>
    //THIS IS A CALL FUNCTION THAT RETURNS THE EXPECTED REWARD VALUE THE USER RECEIVES 
    function calculateReward(address _stakeHolder) public view returns(uint256) {
        uint256 _stakes = stakeHoldersInfo[_stakeHolder].stakes;
        uint256 _shares = stakeHoldersInfo[_stakeHolder].shares;
        uint256 _totalSupply = totalSupply;
        uint256 _tempBalance = tempBalance;
        uint256 _accEuphPerShare = accEuphPerShare;
        uint256 _providedTokens = providedTokens;
        uint256 _rewardDebt = rewardDebt;
        uint256 _depositedTokens = depositedTokens;

        (_totalSupply, _accEuphPerShare) = updatePoolForCalculation(_totalSupply, _accEuphPerShare, _depositedTokens);
        //LEAVESTAKING(0)
        uint256 pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
        if(pending > 0) {
            uint256 val;
            if (pending > _totalSupply) {
                val = _totalSupply;
            } else {
                val = pending;
            }
            _tempBalance += val;
            _totalSupply -= val;
        }
        _rewardDebt = (_providedTokens * _accEuphPerShare) / PRECISION;

        //ENTERSTAKING(available())
        uint256 _amount = _tempBalance;
        if (_providedTokens > 0) {
            pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
            if(pending > 0) {
                uint256 val;
                if (pending > _totalSupply) {
                    val = _totalSupply;
                } else {
                    val = pending;
                }
                _tempBalance += val;
                _totalSupply -= val;
            }
        }
        if(_amount > 0) {
            _tempBalance -= _amount;
            _totalSupply += _amount;
            _providedTokens += _amount;
            _depositedTokens += _amount;
        }
        _rewardDebt = (_providedTokens * _accEuphPerShare) / PRECISION;

        //UNSTAKE
        uint256 currentAmount = ((_providedTokens + _tempBalance) * _shares) / totalShares;
        uint256 bal = _tempBalance;
        if (bal < currentAmount) {
            uint256 balWithdraw = currentAmount - bal;
            
            _amount = balWithdraw;
            //LEAVESTAKING(balWithdraw)
            pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
            if(pending > 0) {
                uint256 val;
                if (pending > _totalSupply) {
                    val = _totalSupply;
                } else {
                    val = pending;
                }
                _tempBalance += val;
                _totalSupply -= val;
            }
            if(_amount > 0) {
                _tempBalance += _amount;
            }

            uint256 balAfter = _tempBalance;
            uint256 diff = balAfter - bal;
            if (diff < balWithdraw) {
                currentAmount = bal + diff;
            }
        }

        return currentAmount - _stakes;
    }

    function getStakeHolderShare(address _stakeHolder) public view returns(uint256) {
        /*
        uint256 _rewardAmount = calculateReward(_stakeHolder);
        uint256 _totalSupply = totalSupply;
        uint256 _accEuphPerShare = accEuphPerShare;
        uint256 _depositedTokens = depositedTokens;

        (_totalSupply, _accEuphPerShare) = updatePoolForCalculation(_totalSupply, _accEuphPerShare, _depositedTokens);

        return (_rewardAmount * PRECISION) / _totalSupply;
        */
        return (stakeHoldersInfo[_stakeHolder].shares * PRECISION) / totalShares;
    }

    //RETURNS USER'S TOTAL AMOUNT OF STAKES
    
    function getUserStakesAmount(address _stakeHolder) external view returns(uint256) {
        return stakeHoldersInfo[_stakeHolder].stakes;
    }

    function getUserLockedStakesAmount(address _stakeHolder) external view returns(uint256) {
        return privateStakeHoldersInfo[_stakeHolder].lockedStakes;
    }

    function isStakeHolder(address stakeholder) public view returns(bool) {
        if(stakeHoldersInfo[stakeholder].stakes != 0) {
            return true;
        }
       
       return false;
    }
    
    function getUnlockedStakes(address _stakeHolder) external view returns(uint256) {
        uint256 unlockedStakesAmount = 0;
        if(privateStakeHoldersInfo[_stakeHolder].privateAddress != address(0)) {
            uint256 _privateUnlockPercent = privateUnlockPercent;
            PrivateStakeHolder memory privateSH = privateStakeHoldersInfo[_stakeHolder];
            uint256 monthsSinceDate = _monthsSinceDate(startDate);
            if(_privateUnlockPercent == 1e12) { 
                unlockedStakesAmount = privateSH.lockedStakes;
            } else {
                _privateUnlockPercent = monthsSinceDate >= 11 ? 1e12 : initialPrivateUnlockPercent + (monthsSinceDate * 75e9);
                if(_privateUnlockPercent == 1e12) return privateSH.lockedStakes;
                if(_privateUnlockPercent > privateSH.lastWithdrawPercent) {
                    uint256 unlockedMonths = privateSH.unlockPercentagePerMonth * ((_privateUnlockPercent - privateSH.lastWithdrawPercent) / 75e9);
                    unlockedStakesAmount = (unlockedMonths * privateSH.initialStakes) / 1e12;
                }
            }
        }

        return unlockedStakesAmount;
    }
    
    // <<<================================= END OF GETTERS =================================>>>

    function transferTokensToContract(uint256 amount) public onlyOwner
    {
        address owner = _msgSender();
        token.safeTransferFrom(owner, address(this), amount);
        emit TokensTransferedToStakingBalance(owner, amount);
    }

    function stake(uint256 _stakeAmount)
       external
       contractStarted
       contractNotExpired
       notContract
       returns (bool) 
    {
        address stakeHolder = _msgSender();
        require(_stakeAmount >= toKiloToken(10000), "Staking: Minimal stake value is 10 000 euphoria tokens");
        require(_stake(stakeHolder, _stakeAmount), "Staking: Couldn't create stake");
        token.safeTransferFrom(msg.sender, address(this), _stakeAmount);
        emit StakeCreated(stakeHolder, _stakeAmount);
        return true;
    }

    function stakeForPrivateSaleStakeholder(address _privateAddress, address _publicAddress, uint256 _stakeAmount, uint256 _unlockedPercent)
       external
       contractStarted
       contractNotExpired
       notContract
       onlyOwner
       returns (bool) 
    {
        PrivateStakeHolder storage stakeHolder = privateStakeHoldersInfo[_publicAddress];
        stakeHolder.initialStakes += _stakeAmount;
        stakeHolder.lockedStakes = _stakeAmount;
        stakeHolder.privateAddress = _privateAddress;
        stakeHolder.unlockPercentagePerMonth = 1e12 / ((1e12 - _unlockedPercent) / 75e9);
        stakeHolder.lastWithdrawPercent = _unlockedPercent;
        privateStakeHoldersCount += 1;
        require(_stake(_publicAddress, _stakeAmount), "Staking: Couldn't create stake");
        token.safeTransferFrom(_privateAddress, address(this), _stakeAmount);

        return true;
    }

    function unStake()
        external
        contractStarted
        notContract
        returns (bool)
    {
        address stakeHolder = _msgSender();
        uint256 withdrawAmount;
        if(privateStakeHoldersInfo[stakeHolder].privateAddress != address(0)) {
            uint256 _unlockedStakes = _getUnlockedStakes(stakeHolder);
            if(_unlockedStakes == 0) {
                require(stakeHoldersInfo[stakeHolder].stakes != privateStakeHoldersInfo[stakeHolder].lockedStakes, "Staking: Your private sale EUPH tokens are still being locked. Please, wait till the next time");
            }
            privateStakeHoldersInfo[stakeHolder].lockedStakes -= _unlockedStakes;
            withdrawAmount = _unStake(stakeHolder, stakeHoldersInfo[stakeHolder].stakes - privateStakeHoldersInfo[stakeHolder].lockedStakes);
            if(privateStakeHoldersInfo[stakeHolder].lockedStakes == 0) {
                _removePrivateStakeHolder(stakeHolder);
            } else {
                _stake(stakeHolder, privateStakeHoldersInfo[stakeHolder].lockedStakes);
            }
        } else {
            withdrawAmount = _unStake(stakeHolder, stakeHoldersInfo[stakeHolder].stakes);
        }
        
        token.safeTransfer(msg.sender, withdrawAmount);
        emit UnStaked(stakeHolder, withdrawAmount);
        return true;
    }

    function finalize() external onlyOwner contractStarted contractExpired {
        address owner = _msgSender();
        uint256 balanceEUPH = token.balanceOf(address(this));
        if(balanceEUPH > 0)  token.safeTransfer(owner, balanceEUPH);
        selfdestruct(payable(owner));
    }

    // <================================ INTERNAL FUNCTIONS ================================>

    function decimals() internal pure returns(uint8) {
        return 3;
    }

    function toKiloToken(uint256 amount) internal pure returns(uint256) {
        return amount * (10 ** decimals());
    }

    function balanceOfContract()
       internal
       view
       returns(uint256)
   {
       return token.balanceOf(address(this));
   }

    // <================================ PRIVATE FUNCTIONS ================================>
    
    function _removeStakeHolder(address _stakeHolder) private contractStarted {
        delete stakeHoldersInfo[_stakeHolder];
        
        stakeHoldersCount -= 1;
   }
   
   function _removePrivateStakeHolder(address _stakeHolder) private contractStarted {
        delete privateStakeHoldersInfo[_stakeHolder];
        privateStakeHoldersCount -= 1;
        if(stakeHoldersInfo[_stakeHolder].stakes == 0) {
            delete stakeHoldersInfo[_stakeHolder];
        }
        if(privateStakeHoldersCount == 0) {
            delete initialPrivateUnlockPercent;
            delete privateUnlockPercent;
            delete privateStakeHoldersCount;
        }
    }

   function _setSupplyAndDuration(uint256 rewardSupply, uint16 durationInDays) private {
       require(durationInDays > 0, "Staking: Duration cannot be a zero value");
       require(rewardSupply > 0, "Staking: Reward supply must be higher than 0");
        contractDurationInDays = durationInDays;
        initialRewardSupply = rewardSupply;
        rewardsPerFiveMins = initialRewardSupply / (contractDurationInDays * FIVE_MINUTES_IN_DAY);
   }

   function _setToken(address newTokenAddress) private {
        require(
            address(token) != newTokenAddress,
            "Staking: Cannot change token of same address"
        );
        token = IERC20(newTokenAddress);
    }

    function _getCurrentDay() private view returns (uint256) 
    {
        return _daysSinceTime(startDate);  
    }

    function _getLastRewardDay() private view returns (uint256) {
        return _daysSinceTime(lastRewardTime);
    }

    function _pauseSinceTime(uint256 _timestamp) private view returns (uint256) {
        return _timestamp >= startDate ? ((block.timestamp - _timestamp) / 5 minutes) * 5 minutes : 0;
    }

    function _fiveMinutesSinceTime(uint256 _timestamp) private view returns (uint256) {
        return _timestamp >= startDate ? (block.timestamp - _timestamp) / 5 minutes : 0;
    }

    function _daysSinceTime(uint256 _timestamp) private view returns (uint256) {
        return _timestamp >= startDate ? (block.timestamp - _timestamp) / 1 days : 0;
    }

    function _monthsSinceDate(uint256 _timestamp) private view returns(uint256){
        return  (block.timestamp - _timestamp) / 30 days;
    }

    function _stake(address _stakeHolder, uint256 _stakeAmount) private returns (bool) {
        require(_stakeHolder != address(0), "Staking: No zero address is allowed");
        require(_stakeAmount > 0, "Nothing to deposit");

        if(!isStakeHolder(_stakeHolder))
        { 
            stakeHoldersCount += 1;
        }

        _harvest();

        uint256 pool = _balanceOf();
        tempBalance += _stakeAmount;

        uint256 currentShares = 0;
        if (totalShares != 0) {
            currentShares = (_stakeAmount * totalShares) / pool;
        } else {
            currentShares = _stakeAmount * PRECISION;
        }
        StakeHolder storage stakeHolder = stakeHoldersInfo[_stakeHolder];

        stakeHolder.shares += currentShares;
        stakeHolder.stakes += _stakeAmount;
        //stakeholder.lastDepositedDay = _getCurrentDay();

        totalShares += currentShares;
        totalStakes += _stakeAmount;

        //stakeHolder.EuphAtLastUserAction = (stakeHolder.shares * _balanceOf()) / totalShares;
        //stakeholder.lastUserActionDay = _getCurrentDay();

        _earn();

        return true;
   }

   function _unStake(address _stakeHolder, uint256 _unStakeAmount) private returns (uint256) {
        require(_stakeHolder != address(0), "Staking: Zero address is prohibited");
        require(isStakeHolder(_stakeHolder), "Staking: There is not any stake holder with provided address");
        StakeHolder storage stakeHolder = stakeHoldersInfo[_stakeHolder];
        uint256 _shares = stakeHolder.shares;
        require(_shares > 0, "Nothing to withdraw");

        _harvest();

        uint256 currentAmount = (_balanceOf() * _shares) / totalShares;
        stakeHolder.shares -= _shares;
        totalShares -= _shares;
        
        uint256 bal = _available();
        if (bal < currentAmount) {
            uint256 balWithdraw = currentAmount - bal;
            _leaveStaking(balWithdraw);
            uint256 balAfter = _available();
            uint256 diff = balAfter - bal;
            if (diff < balWithdraw) {
                currentAmount = bal + diff;
            }
        }

        /*
        if (stakeHolder.shares > 0) {
            stakeHolder.EuphAtLastUserAction = (stakeHolder.shares * _balanceOf()) / totalShares;
            stakeHolder.lastUserActionDay = _getCurrentDay();
        } else {
            _removeStakeHolder(_stakeHolder);
        }
        */
        
        tempBalance -= currentAmount;
        
        /*
        if(privateStakeHoldersInfo[_stakeHolder].lockedStakes != 0) {
            currentAmount -= privateStakeHoldersInfo[_stakeHolder].lockedStakes;
        }
        */
        
        if(stakeHolder.stakes > _unStakeAmount || privateStakeHoldersInfo[_stakeHolder].lockedStakes != 0) {
            currentAmount = (currentAmount - stakeHolder.stakes) + _unStakeAmount;    
        }

        totalStakes -= stakeHolder.stakes;
        stakeHolder.stakes = 0;
        _removeStakeHolder(_stakeHolder);

        return currentAmount;
    }

    function _isContractExpired() private view returns(bool) {
        return block.timestamp - timeInPause >= contractDurationInDays * 1 days + startDate;
    }

    function _balanceOf() private view returns (uint256) {
        return providedTokens + tempBalance;
    }

    function _available() private view returns (uint256) {
        return tempBalance;
    }

    function _enterStaking(uint256 _amount) private {
        updatePool();
        if (providedTokens > 0) {
            uint256 pending = ((providedTokens * accEuphPerShare) / PRECISION) - rewardDebt;
            if(pending > 0) {
                uint256 val = _roundPoolValue(pending);
                tempBalance += val;
                totalSupply -= val;
            }
        }
        if(_amount > 0) {
            tempBalance -= _amount;
            totalSupply += _amount;
            providedTokens += _amount;
            depositedTokens += _amount;
        }
        rewardDebt = (providedTokens * accEuphPerShare) / PRECISION;
    }

    function _leaveStaking(uint256 _amount) private {
        require(providedTokens >= _amount, "withdraw: not good");
        updatePool();
        uint256 pending = ((providedTokens * accEuphPerShare) / PRECISION) - rewardDebt;
        if(pending > 0) {
            uint256 val = _roundPoolValue(pending);
            tempBalance += val;
            totalSupply -= val;
        }
        if(_amount > 0) {
            providedTokens -= _amount;
            totalSupply -= _amount;
            tempBalance += _amount;
            depositedTokens -= _amount;
        }
        rewardDebt = (providedTokens * accEuphPerShare) / PRECISION;
    }

    function updatePool() private {
        if(distributionEnded) return;
        if(block.timestamp <= lastRewardTime || lastRewardTime == (contractDurationInDays * 1 days + startDate) + timeInPause) return;
        
        uint256 supply = depositedTokens;

        if (supply <= 0) {
            lastRewardTime = block.timestamp;
            return;
        }

        uint256 passedFiveMinsAmount;

        if (block.timestamp - timeInPause > contractDurationInDays * 1 days + startDate) {
            distributionEnded = true;
            passedFiveMinsAmount = ((contractDurationInDays * 1 days + startDate) - (lastRewardTime - timeInPause)) / 5 minutes;
        } else {
            passedFiveMinsAmount = (block.timestamp - lastRewardTime) / 5 minutes;
        }

        uint256 rewardForPassedMinutes = rewardsPerFiveMins * passedFiveMinsAmount;
        totalSupply += rewardForPassedMinutes;
        accEuphPerShare += (rewardForPassedMinutes * PRECISION) / supply;
        lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
    }

    function updatePoolForCalculation(uint256 _totalSupply, uint256 _accEuphPerShare, uint256 _depositedTokens) private view returns(uint256, uint256) {
        uint256 _totalSupplyToReturn = _totalSupply;
        uint256 _accEuphPerShareToReturn = _accEuphPerShare;

        if (block.timestamp <= lastRewardTime || lastRewardTime == (contractDurationInDays * 1 days + startDate) + timeInPause) {
            return (_totalSupply, _accEuphPerShare);
        }
        
        uint256 supply = _depositedTokens;

        if (supply <= 0) {
            return (_totalSupply, _accEuphPerShare);
        }

        uint256 passedFiveMinsAmount;

        if (block.timestamp - timeInPause > contractDurationInDays * 1 days + startDate) {
            passedFiveMinsAmount = ((contractDurationInDays * 1 days + startDate) - (lastRewardTime - timeInPause)) / 5 minutes;
        } else {
            passedFiveMinsAmount = (block.timestamp - lastRewardTime) / 5 minutes;
        }

        uint256 rewardForPassedMinutes = rewardsPerFiveMins * passedFiveMinsAmount;
        _totalSupplyToReturn += rewardForPassedMinutes;
        _accEuphPerShareToReturn += (rewardForPassedMinutes * PRECISION) / supply;
        return (_totalSupplyToReturn, _accEuphPerShareToReturn);
    }

    function _getUnlockedStakes(address _stakeHolder) private returns(uint256) {
        uint256 unlockedStakesAmount = 0;
        if(privateStakeHoldersInfo[_stakeHolder].privateAddress != address(0)) {
            PrivateStakeHolder storage privateSH = privateStakeHoldersInfo[_stakeHolder];
            uint256 monthsSinceDate = _monthsSinceDate(startDate);
            if(privateUnlockPercent == 1e12) { 
                unlockedStakesAmount = privateSH.lockedStakes;
            } else {
                privateUnlockPercent = monthsSinceDate >= 11 ? 1e12 : initialPrivateUnlockPercent + (monthsSinceDate * 75e9);
                if(privateUnlockPercent == 1e12) return privateSH.lockedStakes;
                if(privateUnlockPercent > privateSH.lastWithdrawPercent) {
                    uint256 unlockedMonths = privateSH.unlockPercentagePerMonth * ((privateUnlockPercent - privateSH.lastWithdrawPercent) / 75e9);
                    unlockedStakesAmount = (unlockedMonths * privateSH.initialStakes) / 1e12;
                }
            }
            privateSH.lastWithdrawPercent = privateUnlockPercent;
        }
        return unlockedStakesAmount;
    }

    function _harvest() private {
        if((block.timestamp - lastRewardTime) / 5 minutes <= 0) return;
        _leaveStaking(0);
        _earn();
    }

    //just in case if rounding error causes pool to not have enough EUPHs
    function _roundPoolValue(uint256 _amount) private view returns(uint256) {
        if (_amount > totalSupply) {
            return totalSupply;
        } else {
            return _amount;
        }
    }

    function _earn() private {
        uint256 bal = _available();
        if (bal > 0) {
            _enterStaking(bal);
        }
    }

    function _isContract(address addr) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(addr)
        }
        return size > 0;
    }
}