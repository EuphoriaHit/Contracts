// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

//This smart contract's reward distribution algorithm was based on this article
//https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf
    
contract Staking is Ownable{
    using SafeERC20 for IERC20;
    uint64 constant PRECISION = 1000000000000;

    modifier contractExpired() {
        uint256 currentDay = _getCurrentDay();
        if(_totalStakes == 0) {
            _daysInPause += currentDay - _lastActiveDay;
            _lastActiveDay = currentDay;
        }
        require(currentDay - _daysInPause >= _contractDurationInDays && _totalStakes == 0, "Staking: The staking contract is not yet expired");
        _;
    }

    modifier contractNotExpired() {
        uint256 currentDay = _getCurrentDay();
        if(_totalStakes == 0) {
            _daysInPause += currentDay - _lastActiveDay;
            _lastActiveDay = currentDay;
        }
        require(currentDay - _daysInPause < _contractDurationInDays, "Staking: The staking contract has already expired");
        _;
    }

    modifier contractStarted() {
        require(_stakingStarted == true, "Staking: The staking contract has not started yet");
        _;
    }

    modifier contractNotStarted() {
        require(_stakingStarted == false, "Staking: The staking contract has already started");
        _;
    }

    // <================================ CONSTRUCTOR AND INITIALIZER ================================>

    constructor(uint256 supplyPercentage, uint8 comissionPercentage, uint16 durationInDays, address tokenAddress) {
        _setToken(tokenAddress);
        _comissionPercentage = comissionPercentage;
        _setSupplyAndDuration(supplyPercentage, durationInDays);
    }

    function changeSupplyAndDuration(uint256 supplyPercentage, uint16 durationInDays) external onlyOwner contractNotStarted {
        _setSupplyAndDuration(supplyPercentage, durationInDays);
    }

    function changeToken(address newTokenAddress) external onlyOwner contractNotStarted{
        _setToken(newTokenAddress);
    }

    function initialize()
        external
        onlyOwner
        contractNotStarted
    {
        require(_stakingStarted == false, "Staking: The staking contract has been already initialized");
        _stakingStarted = true;
        _startDate = block.timestamp - (block.timestamp % 1 days );
        transferTokensToContract(_initialSupply);
    }

    // <================================ END OF CONSTRUCTOR AND INITIALIZER ================================>
    // VARIABLES IN BYTES16 ARE USED FOR PRECISION CALCULATIONS WITH ABDKMATHQUAD LIBRARY

    IERC20 private _token;
    uint8 public _comissionPercentage;
    uint16 public _contractDurationInDays; // Duration of contract in days
    bool private _stakingStarted; // The boolean to check if the staking contract has been initialized and started the work process
    bool private _distributionEnded; // This boolean is used to control the work of distribuiteRewards() function
    mapping(address => mapping(uint256 => uint256)) private _distributedRewardsSnapshot; // S0 value in the Article Paper
    mapping(address => mapping(uint256 => uint256)) private _stake; // Keeps record of user's made stakings. Note that every new staking is considered as a seperate _stake transaction
    mapping(address => uint256) private _stakesCount; // Total number of accomplished stakes by a specific user
    mapping(address => uint16) private _stakedDay;
    uint256 private _distributedRewards; // S value in the Article Paper
    uint256 public _dailyReward; // Amount of tokens that will be distributed among all users in 1 Day 
    uint256 public _initialSupply; // Amount of tokens allocated for Staking contract use
    uint256 public _startDate; // Timestamp of the start day of the contract
    uint256 public _totalStakes; // Represents the total amount of staked Tokens. T value in the Article Paper. Find source of the article on top comment
    uint256 private _previousTotalStakes; // Represents the previous state of total amount of staked Tokens 
    uint256 private _lastActiveDay; // Represents the last day of last activity
    uint256 public _stakeHoldersCount; // Total number of stake holders (users)
    uint256 public _daysInPause; // Number of days with no active stakes. If there were no stakes on a specific day, then no reward is distributed and the duration of contract is extended to plus one day
    uint256 private _totalRewards; // The total amount of rewards that have already been distributed
    uint256 private _collectedComission;
    
    // <================================ EVENTS ================================>
    event StakeCreated(address indexed stakeHolder, uint256 indexed stake);

    event UnStaked(address indexed stakeHolder, uint256 indexed withdrawAmount);

    event TokensTransferedToStakingBalance(address indexed sender, uint256 indexed amount);

    // <================================ EXTERNAL FUNCTIONS ================================>

    // <<<================================= GETTERS =================================>>>

    function calculateReward() external contractStarted view returns (uint256) {
        address _stakeHolder = _msgSender();
        uint256 userStakesCount = _stakesCount[_stakeHolder];
        uint256 reward;
        uint256 distributedRewards = _distributedRewards;
        uint256 withdrawAmount;
        uint256 totalDeposited;
        uint256 currentDay = _getCurrentDay();
        uint256 passedDays;
        require(userStakesCount != 0, "Staking: This user must be a stake holder");

        if (currentDay - _daysInPause > _contractDurationInDays) {
            passedDays = _contractDurationInDays - (_lastActiveDay - _daysInPause);
        } else {
            passedDays = currentDay - _lastActiveDay;
        }

        distributedRewards += (_dailyReward * passedDays * PRECISION) / _previousTotalStakes;

        // Calculation of User reward
        for(uint i = 0; i < userStakesCount; i++) {
            uint256 deposited = _stake[_stakeHolder][i];
            reward += (deposited * (distributedRewards - _distributedRewardsSnapshot[_stakeHolder][i])) / PRECISION;
            totalDeposited += deposited;
        }

        uint256 comission = (reward * _comissionPercentage) / 100;
        withdrawAmount = (reward + totalDeposited) - comission;

        return withdrawAmount;
    }

    function canUserUnstake(address stakeHolder) external view returns(bool) {
        return _getCurrentDay() > _stakedDay[stakeHolder];
    }

    function getUserStakesAmount(address stakeHolder) external view returns(uint256) {
        uint256 result;

        for(uint i = 0; i < _stakesCount[stakeHolder]; i++) {
            result += _stake[stakeHolder][i];
        }

        return result;
    }

    // <<<================================= END OF GETTERS =================================>>>

    function transferTokensToContract(uint256 amount) public onlyOwner
    {
        address owner = _msgSender();
        _token.safeTransferFrom(owner, address(this), amount);
        emit TokensTransferedToStakingBalance(owner, amount);
    }

   function isStakeHolder(address stakeholder) public view returns(bool) {
       if(_stake[stakeholder][0] != 0 && _stakesCount[stakeholder] != 0) {
           return true;
       }
       return false;
   }

   function createStake(uint256 stakeAmount) external contractStarted contractNotExpired returns (bool) {
        address _stakeHolder = _msgSender();
        require(_stakeHolder != address(0), "Staking: No zero address is allowed");
        require(stakeAmount >= toKiloToken(10000), "Staking: Minimal stake value is 10 000 euphoria tokens");
        uint256 stakeId = _stakesCount[_stakeHolder];
        uint256 currentDay = _getCurrentDay();
        _token.safeTransferFrom(_stakeHolder, address(this), stakeAmount);

        if(!isStakeHolder(_stakeHolder))
        { 
            _stakeHoldersCount += 1; 
        }
        if(!_distributionEnded && currentDay != _lastActiveDay) {
            _distributeRewards();
        }

        _stake[_stakeHolder][stakeId] = stakeAmount;
        _distributedRewardsSnapshot[_stakeHolder][stakeId] = _distributedRewards;
       
        _totalStakes += stakeAmount;
        _stakesCount[_stakeHolder] += 1;

        if(_previousTotalStakes == 0 || currentDay == _lastActiveDay) {
            _previousTotalStakes = _totalStakes;
        }

        if(_stakedDay[_stakeHolder] == 0){
            _stakedDay[_stakeHolder] = uint16(currentDay);
        }

        emit StakeCreated(_stakeHolder, stakeAmount);

        return true;
   }

    function _withdrawComission() external onlyOwner contractStarted returns(bool) {
        address owner = _msgSender();
        uint256 contractBalance = _token.balanceOf(address(this));
        require(contractBalance > 0, "Staking: Nothing to withdraw. Contract's token balance is empty");
        _token.safeTransfer(owner, _collectedComission);

        return true;
    }

    function finalize() external onlyOwner contractStarted contractExpired {
        selfdestruct(payable(_msgSender()));
    }

    function unStake() external contractStarted returns (bool) {
        address _stakeHolder = _msgSender();
        require(_stakeHolder != address(0), "Staking: Zero address is prohibited");
        require(isStakeHolder(_stakeHolder), "Staking: There is not any stake holder with provided address");
        uint256 userStakesCount = _stakesCount[_stakeHolder];
        uint256 reward;
        uint256 withdrawAmount;
        uint256 totalDeposited;
        require(userStakesCount != 0, "Staking: This user must be a stake holder");

        if(!_distributionEnded)
        {
            if(_getCurrentDay() != _lastActiveDay) {
                _distributeRewards();
            }
        }

        // Calculation of User reward
        for(uint i = 0; i < userStakesCount; i++) {
            uint256 deposited = _stake[_stakeHolder][i];
            reward += (deposited * (_distributedRewards - _distributedRewardsSnapshot[_stakeHolder][i])) / PRECISION;
            totalDeposited += deposited;
        }

        require(reward > 0, "Staking: Address does not have any rewarded tokens in his balance");

        _totalRewards += reward;
        
        _totalStakes -= totalDeposited;
        _previousTotalStakes = _totalStakes;
        
        uint256 comission = (reward * _comissionPercentage) / 100;
        _collectedComission += comission;

        withdrawAmount = (reward + totalDeposited) - comission;
        _token.safeTransfer(_stakeHolder, withdrawAmount);

        removeStakeHolder(_stakeHolder);
        emit UnStaked(_stakeHolder, withdrawAmount);

        return true;
    }

    // <================================ INTERNAL FUNCTIONS ================================>

    function decimals() internal pure returns(uint8) {
        return 3;
    }

    function toKiloToken(uint256 amount) internal pure returns(uint256) {
        return amount * (10 ** decimals());
    }

    function balanceOfContract()
       internal
       view
       returns(uint256)
   {
       return _token.balanceOf(address(this));
   }

    // <================================ PRIVATE FUNCTIONS ================================>

    function removeStakeHolder(address stakeholder) private contractStarted {
       require(stakeholder != address(0), "Staking: No zero address is allowed");
       bool _isStakeHolder = isStakeHolder(stakeholder);
       require(_isStakeHolder == true, "Staking: There is not any stake holder with provided address");

       if(_isStakeHolder) {
           for(uint i = 0; i < _stakesCount[stakeholder]; i++) {
               delete _stake[stakeholder][i];
               delete _distributedRewardsSnapshot[stakeholder][i];
           }
           delete _stakedDay[stakeholder];
           delete _stakesCount[stakeholder];
           _stakeHoldersCount -= 1;
       }
   }

   function _setSupplyAndDuration(uint256 supplyPercentage, uint16 durationInDays) private contractNotStarted {
       require(durationInDays > 0, "Staking: Duration cannot be a zero value");
       require(supplyPercentage > 0, "Staking: Supply percentage cannot be a zero value");
        _contractDurationInDays = durationInDays;
        _initialSupply = (_token.totalSupply() * supplyPercentage) / 100;
        _dailyReward = _initialSupply / _contractDurationInDays;
   }

   function _setToken(address newTokenAddress) private contractNotStarted {
        require(
            address(_token) != newTokenAddress,
            "Staking: Cannot change token of same address"
        );
        _token = IERC20(newTokenAddress);
    }

    function _getCurrentDay() private view returns (uint256) 
    {
        return (block.timestamp - _startDate) / 1 days;    
    }

    function _distributeRewards()
        private
        contractStarted
    {
        uint256 currentDay = _getCurrentDay();
        uint256 passedDays;

        if(_lastActiveDay == currentDay || _lastActiveDay == _contractDurationInDays + _daysInPause) return;
        
        if (currentDay - _daysInPause > _contractDurationInDays) {
            _distributionEnded = true;
            passedDays = _contractDurationInDays - (_lastActiveDay - _daysInPause);
        } else {
            passedDays = currentDay - _lastActiveDay;
        }

        _distributedRewards += (_dailyReward * passedDays * PRECISION) / _previousTotalStakes;

        _lastActiveDay = currentDay;
    }
}