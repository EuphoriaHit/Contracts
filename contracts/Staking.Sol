// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

//This smart contract's code was copied and adopted from Biswap's impementation
//https://github.com/biswap-org/staking
//This contract combines MasterChef and AutoBSW contracts logic into one contract

contract Staking is Ownable{
    using SafeERC20 for IERC20;
    uint64 constant PRECISION = 1e12;
    uint16 constant FIVE_MINUTES_IN_DAY = 288;
    uint256 public constant MAX_WITHDRAW_FEE = 200; // 2%
    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 5 days; // 5 days

    struct StakeHolder {
        uint256 stakes; // total amount of stake holder stakes
        uint256 shares; // stake holder shares
        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty
    }

    struct PrivateStakeHolder {
        uint256 lockedStakes; // Amount of tokens being in lock
        uint256 unlockTokensPerMonth; // The amount of tokens to be unlocked every month. Individual for each user depending on their initial stake amount
        uint256 lastWithdrawMonth; // The unlock month number of the last withdraw
    }

    modifier contractExpired() {
        require(_isContractExpired(), "Staking: The staking contract is not yet expired");
        _;
    }

    modifier contractNotExpired() {
        require(_isContractNotExpired(), "Staking: The staking contract has already expired");
        _;
    }

    modifier contractStarted() {
        require(stakingStarted == true, "Staking: The staking contract has not started yet");
        _;
    }

    modifier contractNotStarted() {
        require(stakingStarted == false, "Staking: The staking contract has already started");
        _;
    }

    modifier notContract() {
        require(!_isContract(msg.sender), "contract not allowed");
        require(msg.sender == tx.origin, "proxy contract not allowed");
        _;
    }

    // <================================ CONSTRUCTOR AND INITIALIZER ================================>

    constructor(uint256 rewardSupply, uint16 durationInDays, address tokenAddress, address treasuryAddress) {
        _setToken(tokenAddress);
        _setSupplyAndDuration(rewardSupply, durationInDays);
        _setWithdrawOptions(10, 3);
        _setTreasury(treasuryAddress);
        initialLockTime = 1640390400;
    }

    function changeSupplyAndDuration(uint256 supply, uint16 durationInDays) external onlyOwner contractNotStarted {
        _setSupplyAndDuration(supply, durationInDays);
    }

    function changeToken(address newTokenAddress) external onlyOwner contractNotStarted{
        _setToken(newTokenAddress);
    }

    function changeTreasury(address newTreasuryAddress) external onlyOwner {
        _setTreasury(newTreasuryAddress);
    }

    function changeWithdrawOptions(uint256 newFee, uint256 newPeriod) external onlyOwner contractNotStarted{
        _setWithdrawOptions(newFee, newPeriod);
    }

    function initialize()
        external
        onlyOwner
        contractNotStarted
    {
        require(stakingStarted == false, "Staking: The staking contract has been already initialized");
        stakingStarted = true;
        startTime = block.timestamp - (block.timestamp % 5 minutes );
        lastRewardTime = startTime;
        transferTokensToContract(initialRewardSupply);
    }

    // <================================ END OF CONSTRUCTOR AND INITIALIZER ================================>
    IERC20 private token;
    
    address public treasury; // Address where withdraw fee will be sent to

    bool private stakingStarted; // The boolean to check if the staking contract has been initialized and started the work process
    bool private distributionEnded; // This boolean is used to control the work of distribuiteRewards() function
    
    uint256 public contractDurationInDays; // Duration of contract in days
    uint256 public rewardsPerFiveMins; // Amount of tokens that will be distributed among all users in 1 Day 
    uint256 public initialRewardSupply; // Initial amount of tokens allocated for Staking contract use
    uint256 public startTime; // Timestamp of the start day of the contract
    uint256 public initialLockTime; // Timestamp of the start day of the private tokens unlock
    uint256 public totalStakes; // Total number of stakes made by stake holders
    uint256 public totalShares; // Represents the total amount of staked Tokens
    uint256 public stakeHoldersCount; // Total number of stake holders (users)
    uint256 public privateStakeHoldersCount; // Total number of private stake holders
    uint256 public timeInPause; // Timestamp amount with no active stakes. If there were no stakes on a specific period, then no reward is distributed and the duration of contract is extended to paused amount
    
    uint256 private rewardDebt; // userInfo[0].rewardDebt in Biswap's MasterStaking contract
    uint256 private providedTokens; // userInfo[0].amount in Biswap's MasterStaking contract
    uint256 private tempBalance; // Token balance of AutoBSW contract in Biswap implementation. tempBalance stands for temporary balance
    uint256 private totalSupply; // Token Balance of pool with pid 0 in Biswap's MasterStaking contract
   
    uint256 public withdrawFee = 10; // 0.1% THIS VALUE MIGHT BE CHANGED, BUT IT IS NOT EXPECTED
    uint256 public withdrawFeePeriod = 3 days; // 3 days THIS VALUE MIGHT BE CHANGED, BUT IT IS NOT EXPECTED

    mapping(address => PrivateStakeHolder) public privateStakeHoldersInfo;
    mapping(address => StakeHolder) public stakeHoldersInfo;
    uint256 public lastRewardTime; //Timestamp of last updatePool;
    uint256 public accEuphPerShare; // accBswPerShare variable in Biswap's MasterStaking contract

    // <================================ EVENTS ================================>
    event StakeCreated(address indexed stakeHolder, uint256 indexed stake);

    event RewardsWithdrawn(address indexed stakeHolder, uint256 indexed withdrawAmount);

    event UnStaked(address indexed stakeHolder, uint256 indexed withdrawAmount);

    event TokensTransferedToStakingBalance(address indexed sender, uint256 indexed amount);

    // <================================ EXTERNAL FUNCTIONS ================================>

    // <<<================================= GETTERS =================================>>>
    //THIS IS A CALL FUNCTION THAT RETURNS THE EXPECTED REWARD VALUE THE USER RECEIVES 
    function calculateReward(address _stakeHolder) public view returns(uint256) {
        if(!isStakeHolder(_stakeHolder)) return 0;
        uint256 _stakes = stakeHoldersInfo[_stakeHolder].stakes;
        uint256 _shares = stakeHoldersInfo[_stakeHolder].shares;
        uint256 _totalSupply = totalSupply;
        uint256 _tempBalance = tempBalance;
        uint256 _accEuphPerShare = accEuphPerShare;
        uint256 _providedTokens = providedTokens;
        uint256 _rewardDebt = rewardDebt;

        (_totalSupply, _accEuphPerShare) = _updatePoolForCalculation(_totalSupply, _accEuphPerShare, _providedTokens);
        //LEAVESTAKING(0)
        uint256 pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
        if(pending > 0) {
            uint256 val;
            if (pending > _totalSupply) {
                val = _totalSupply;
            } else {
                val = pending;
            }
            _tempBalance += val;
            _totalSupply -= val;
        }
        _rewardDebt = (_providedTokens * _accEuphPerShare) / PRECISION;

        //ENTERSTAKING(available())
        uint256 _amount = _tempBalance;
        if (_providedTokens > 0) {
            pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
            if(pending > 0) {
                uint256 val;
                if (pending > _totalSupply) {
                    val = _totalSupply;
                } else {
                    val = pending;
                }
                _tempBalance += val;
                _totalSupply -= val;
            }
        }
        if(_amount > 0) {
            _tempBalance -= _amount;
            _totalSupply += _amount;
            _providedTokens += _amount;
        }
        _rewardDebt = (_providedTokens * _accEuphPerShare) / PRECISION;

        //UNSTAKE
        uint256 currentAmount = ((_providedTokens + _tempBalance) * _shares) / totalShares;
        uint256 bal = _tempBalance;
        if (bal < currentAmount) {
            uint256 balWithdraw = currentAmount - bal;
            
            _amount = balWithdraw;
            //LEAVESTAKING(balWithdraw)
            pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
            if(pending > 0) {
                uint256 val;
                if (pending > _totalSupply) {
                    val = _totalSupply;
                } else {
                    val = pending;
                }
                _tempBalance += val;
                _totalSupply -= val;
            }
            if(_amount > 0) {
                _tempBalance += _amount;
            }

            uint256 balAfter = _tempBalance;
            uint256 diff = balAfter - bal;
            if (diff < balWithdraw) {
                currentAmount = bal + diff;
            }
        }

        return currentAmount > _stakes ? currentAmount - _stakes : 0;
    }

    function getTotalPool() public view returns(uint256) {
        if(totalStakes == 0) return 0;
        uint256 _totalSupply = totalSupply;
        uint256 _tempBalance = tempBalance;
        uint256 _accEuphPerShare = accEuphPerShare;
        uint256 _providedTokens = providedTokens;
        uint256 _rewardDebt = rewardDebt;

        (_totalSupply, _accEuphPerShare) = _updatePoolForCalculation(_totalSupply, _accEuphPerShare, _providedTokens);
        //LEAVESTAKING(0)
        uint256 pending = ((_providedTokens * _accEuphPerShare) / PRECISION) - _rewardDebt;
        if(pending > 0) {
            uint256 val;
            if (pending > _totalSupply) {
                val = _totalSupply;
            } else {
                val = pending;
            }
            _tempBalance += val;
        }

        //ENTERSTAKING(available())
        uint256 _amount = _tempBalance;
        if(_amount > 0) {
            _providedTokens += _amount;
        }

        return _providedTokens;
    }

    function getTotalStakes() external view returns(uint256) {
        return totalStakes;
    }

    function getStakeHolderShare(address _stakeHolder) public view returns(uint256) {
        return totalShares > 0 ? (stakeHoldersInfo[_stakeHolder].shares * PRECISION) / totalShares : 0;
    }

    // RETURNS USER'S TOTAL AMOUNT OF STAKES
    function getUserStakesAmount(address _stakeHolder) external view returns(uint256) {
        return stakeHoldersInfo[_stakeHolder].stakes;
    }

    // RETURNS TOTAL NUMBER OF STAKE HOLDERS
    function getStakeHoldersAmount() external view returns(uint256) {
        return stakeHoldersCount;
    }

    // RETURNS TOTAL NUMBER OF PRIVATE STAKE HOLDERS
    function getPrivateStakeHoldersAmount() external view returns(uint256) {
        return privateStakeHoldersCount;
    }

    function getUserLockedStakesAmount(address _stakeHolder) external view returns(uint256) {
        return privateStakeHoldersInfo[_stakeHolder].lockedStakes;
    }

    function isStakeHolder(address _stakeHolder) public view returns(bool) {
       return stakeHoldersInfo[_stakeHolder].stakes != 0;
    }
    
    function isPrivateStakeHolder(address _stakeHolder) public view returns(bool) {
       return privateStakeHoldersInfo[_stakeHolder].lockedStakes != 0;
    }

    function getUnlockedStakes(address _stakeHolder) public view returns(uint256) {
        uint256 unlockedStakesAmount = 0;
        if(isPrivateStakeHolder(_stakeHolder)) {
            PrivateStakeHolder memory privateSH = privateStakeHoldersInfo[_stakeHolder];
            uint256 monthsSinceDate = _monthsSinceDate(initialLockTime);
            if(monthsSinceDate >= 11) { 
                unlockedStakesAmount = privateSH.lockedStakes;
            } else {
                if(monthsSinceDate > privateSH.lastWithdrawMonth) {
                    uint256 unlockedMonths = monthsSinceDate - privateSH.lastWithdrawMonth;
                    unlockedStakesAmount = unlockedMonths * privateSH.unlockTokensPerMonth;
                }
            }
        }

        return unlockedStakesAmount;
    }

    function requestStakeHolderInfo(address _stakeHolder) external view returns(
        uint256 rewards, 
        uint256 stakes, 
        uint256 share,
        uint256 depositedTime,
        bool isUserPrivateStakeHolder,
        uint256 unlockedStakes,
        uint256 lockedStakes,
        uint256 remainingUnlockMonths) 
    {
        StakeHolder memory stakeHolder = stakeHoldersInfo[_stakeHolder];
        PrivateStakeHolder memory privateStakeHolder = privateStakeHoldersInfo[_stakeHolder];
        rewards = calculateReward(_stakeHolder);
        stakes = stakeHolder.stakes;
        share = getStakeHolderShare(_stakeHolder);
        depositedTime = stakeHolder.lastDepositedTime;
        isUserPrivateStakeHolder = isPrivateStakeHolder(_stakeHolder);
        unlockedStakes = getUnlockedStakes(_stakeHolder);
        lockedStakes = privateStakeHolder.lockedStakes;
        remainingUnlockMonths = _monthsSinceDate(initialLockTime) - privateStakeHolder.lastWithdrawMonth;
    }
    
    // <<<================================= END OF GETTERS =================================>>>

    function transferTokensToContract(uint256 amount) public onlyOwner
    {
        address owner = _msgSender();
        token.safeTransferFrom(owner, address(this), amount);
        emit TokensTransferedToStakingBalance(owner, amount);
    }

    function stake(uint256 _stakeAmount)
       external
       contractStarted
       contractNotExpired
       notContract
       returns (bool) 
    {
        address stakeHolder = _msgSender();
        require(_stake(stakeHolder, _stakeAmount), "Staking: Couldn't create stake");
        token.safeTransferFrom(stakeHolder, address(this), _stakeAmount);
        emit StakeCreated(stakeHolder, _stakeAmount);
        return true;
    }

    function stakeForPrivateSaleStakeholder(address _privateAddress, address _publicAddress, uint256 _unlockedStakeAmount, uint256 _lockedStakeAmount)
       external
       contractStarted
       contractNotExpired
       notContract
       returns (bool) 
    {
        require(!isPrivateStakeHolder(_publicAddress), "Staking: This user already is a private stake holder");
        uint256 months = _monthsSinceDate(initialLockTime);
        require(months < 11, "Staking: Can not add additional private stake holder. Unlock percent is already 100% and lock period is expired");
        uint256 _unlockedPercent = months >= 11 ? 1e12 : 175e9 + (months * 75e9);
        PrivateStakeHolder storage stakeHolder = privateStakeHoldersInfo[_publicAddress];
        stakeHolder.lockedStakes = _lockedStakeAmount;
        stakeHolder.unlockTokensPerMonth = _lockedStakeAmount / ((1e12 - _unlockedPercent) / 75e9);
        stakeHolder.lastWithdrawMonth = months;
        privateStakeHoldersCount += 1;
        uint256 _stakeAmount = _unlockedStakeAmount + _lockedStakeAmount;
        require(_stake(_publicAddress, _stakeAmount), "Staking: Couldn't create stake");
        token.safeTransferFrom(_privateAddress, address(this), _stakeAmount);

        return true;
    }

    function unStake()
        external
        contractStarted
        notContract
        returns (bool)
    {
        address _stakeHolder = _msgSender();
        uint256 withdrawAmount;
        StakeHolder memory stakeHolder = stakeHoldersInfo[_stakeHolder];
        PrivateStakeHolder storage privateSH = privateStakeHoldersInfo[_stakeHolder];
        if(isPrivateStakeHolder(_stakeHolder)) {
            uint256 _unlockedStakes = _getUnlockedStakes(_stakeHolder);

            if(_unlockedStakes == 0) {
                require(stakeHolder.stakes != privateSH.lockedStakes, "Staking: Your private sale EUPH tokens are still being locked. Please, wait till the next time");
            }
            privateSH.lockedStakes = privateSH.lockedStakes >=_unlockedStakes ? privateSH.lockedStakes - _unlockedStakes : 0;
            withdrawAmount = _unStake(_stakeHolder, stakeHolder.stakes - privateSH.lockedStakes, false);
            if(privateSH.lockedStakes == 0) {
                _removePrivateStakeHolder(_stakeHolder);
            } else {
                _stake(_stakeHolder, privateSH.lockedStakes);
            }
        } else {
            withdrawAmount = _unStake(_stakeHolder, stakeHolder.stakes, false);
        }
        
        token.safeTransfer(_stakeHolder, withdrawAmount);
        emit UnStaked(_stakeHolder, withdrawAmount);
        return true;
    }

    function withdrawRewards()
        external
        contractStarted
        notContract
        returns (bool)
    {
        require(!_isContractExpired(), "Staking: Staking contract has already expired. Please use unstake instead to withdraw your tokens and rewards");
        address stakeHolder = _msgSender();
        uint256 withdrawAmount;
        StakeHolder memory _stakeHolder = stakeHoldersInfo[stakeHolder];
        uint256 stakeHolderStakes = _stakeHolder.stakes;
        withdrawAmount = _unStake(stakeHolder, stakeHolderStakes, true);
        require(withdrawAmount != 0, "Staking: There are no rewards available to be withdrawn");
        _stake(stakeHolder, stakeHolderStakes);
        token.safeTransfer(stakeHolder, withdrawAmount);

        emit RewardsWithdrawn(stakeHolder, withdrawAmount);
        return true;
    }

    // ALLOWS TO WITHDRAW STUCK TOKENS. USED ONLY IN EMERGENCY SITUATIONS
    function withdrawToken(address _token, uint256 _amount) external onlyOwner notContract {
        require(_token != address(0), "Staking: Token of zero address is not allowed");
        address owner = _msgSender();
        IERC20(_token).safeTransfer(owner, _amount);
    } 

    function finalize() external onlyOwner notContract contractStarted contractExpired {
        address owner = _msgSender();
        uint256 balanceEUPH = balanceOfContract();
        if(balanceEUPH > 0) token.safeTransfer(owner, balanceEUPH);
        selfdestruct(payable(owner));
    }

    // <================================ INTERNAL FUNCTIONS ================================>

    function decimals() internal pure returns(uint8) {
        return 3;
    }

    function toKiloToken(uint256 amount) internal pure returns(uint256) {
        return amount * (10 ** decimals());
    }

    function balanceOfContract()
       internal
       view
       returns(uint256)
   {
       return token.balanceOf(address(this));
   }

    // <================================ PRIVATE FUNCTIONS ================================>
    
    function _removeStakeHolder(address _stakeHolder) private contractStarted {
        delete stakeHoldersInfo[_stakeHolder];
        
        stakeHoldersCount -= 1;
   }
   
   function _removePrivateStakeHolder(address _stakeHolder) private contractStarted {
        delete privateStakeHoldersInfo[_stakeHolder];
        privateStakeHoldersCount -= 1;
    }

    function _setSupplyAndDuration(uint256 rewardSupply, uint16 durationInDays) private {
        require(durationInDays > 0, "Staking: Duration cannot be a zero value");
        require(rewardSupply > 0, "Staking: Reward supply must be higher than 0");
        contractDurationInDays = durationInDays;
        initialRewardSupply = rewardSupply;
        rewardsPerFiveMins = initialRewardSupply / (contractDurationInDays * FIVE_MINUTES_IN_DAY);
   }

    function _setToken(address newTokenAddress) private {
        require(
            address(token) != newTokenAddress,
            "Staking: Cannot change token of same address"
        );
        token = IERC20(newTokenAddress);
    }

    function _setTreasury(address newTreasuryAddress) private {
        require(
            address(treasury) != newTreasuryAddress,
            "Staking: Cannot change treasuiry of same address"
        );
        treasury = address(newTreasuryAddress);
    }

    function _setWithdrawOptions(uint256 newFee, uint256 newPeriod) private {
        require(newFee > 0 && newFee <= MAX_WITHDRAW_FEE, "Staking: Withdraw fee must be in range between 1 (0.01%) and 200(2%)");
        require(newPeriod > 0 && newFee <= MAX_WITHDRAW_FEE_PERIOD, "Staking: Withdraw Period must be in range between 1 and 5 days");       
        withdrawFee = newFee;
        withdrawFeePeriod = newPeriod * 1 days;
    }

    function _stake(address _stakeHolder, uint256 _stakeAmount) private returns (bool) {
        require(_stakeHolder != address(0), "Staking: No zero address is allowed");
        require(_stakeAmount > 0, "Staking: Nothing to stake");

        if(!isStakeHolder(_stakeHolder))
        { 
            stakeHoldersCount += 1;
        }

        _harvest();

        uint256 pool = _balanceOf();
        tempBalance += _stakeAmount;

        uint256 currentShares = 0;
        if (totalShares != 0) {
            currentShares = (_stakeAmount * totalShares) / pool;
        } else {
            currentShares = _stakeAmount * PRECISION;
        }
        StakeHolder storage stakeHolder = stakeHoldersInfo[_stakeHolder];

        stakeHolder.shares += currentShares;
        stakeHolder.stakes += _stakeAmount;
        stakeHolder.lastDepositedTime = block.timestamp;

        totalShares += currentShares;
        totalStakes += _stakeAmount;

        _earn();

        return true;
   }

   function _unStake(address _stakeHolder, uint256 _unStakeAmount, bool _onlyRewards) private returns (uint256) {
        require(_stakeHolder != address(0), "Staking: Zero address is prohibited");
        require(isStakeHolder(_stakeHolder), "Staking: There is not any stake holder with provided address");
        StakeHolder storage stakeHolder = stakeHoldersInfo[_stakeHolder];
        uint256 _shares = stakeHolder.shares;
        require(_shares > 0, "Staking: Nothing to withdraw");

        _harvest();

        uint256 currentAmount = (_balanceOf() * _shares) / totalShares;
        stakeHolder.shares -= _shares;
        totalShares -= _shares;
        
        uint256 bal = _available();
        if (bal < currentAmount) {
            uint256 balWithdraw = currentAmount - bal;
            _leaveStaking(balWithdraw);
            uint256 balAfter = _available();
            uint256 diff = balAfter - bal;
            if (diff < balWithdraw) {
                currentAmount = bal + diff;
            }
        }

        tempBalance -= currentAmount;
        
        if(_onlyRewards) currentAmount = currentAmount > stakeHolder.stakes ? currentAmount - stakeHolder.stakes : 0;

        if(stakeHolder.stakes > _unStakeAmount || privateStakeHoldersInfo[_stakeHolder].lockedStakes != 0) {
            currentAmount = stakeHolder.stakes > currentAmount ? _unStakeAmount : (currentAmount - stakeHolder.stakes) + _unStakeAmount;    
        }

        if (block.timestamp < stakeHolder.lastDepositedTime + withdrawFeePeriod) {
            uint256 currentWithdrawFee = (currentAmount * withdrawFee) / 10000;
            if(currentWithdrawFee > 0) {
                token.safeTransfer(treasury, currentWithdrawFee);
                currentAmount -= currentWithdrawFee;
            }
        }

        totalStakes -= stakeHolder.stakes;
        stakeHolder.stakes = 0;
        _removeStakeHolder(_stakeHolder);

        if(totalStakes == 0) {
            delete totalShares;
            delete accEuphPerShare;
            delete totalSupply;
            delete stakeHoldersCount;
            delete rewardDebt;
            delete providedTokens;
            delete tempBalance;
        }

        return currentAmount;
    }

    function _pauseSinceTime(uint256 _timestamp) private view returns (uint256) {
        return _timestamp >= startTime ? ((block.timestamp - _timestamp) / 5 minutes) * 5 minutes : 0;
    }

    function _fiveMinutesSinceTime(uint256 _timestamp) private view returns (uint256) {
        return _timestamp >= startTime ? (block.timestamp - _timestamp) / 5 minutes : 0;
    }

    function _monthsSinceDate(uint256 _timestamp) private view returns(uint256){
        return block.timestamp > _timestamp ? (block.timestamp - _timestamp) / 2629746 : 0; //2629746 is 30.436875 days
    }

    function _isContractExpired() private returns(bool) {
        require(block.timestamp >= lastRewardTime, "Staking: Provided block.timestamp value has been modified");
        if(totalStakes == 0) {
            timeInPause += _pauseSinceTime(lastRewardTime);
            lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
        }
        return block.timestamp - timeInPause >= contractDurationInDays * 1 days + startTime;
    }

    function _isContractNotExpired() private returns(bool) {
        require(block.timestamp >= lastRewardTime, "Staking: Provided block.timestamp value has been modified");
        if(totalStakes == 0) {
            timeInPause += _pauseSinceTime(lastRewardTime);
            lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
        }
        return block.timestamp - timeInPause < contractDurationInDays * 1 days + startTime;
    }

    // returns providedTokens + tempBalance. In Biswap's implementation it returns the user[0].amount
    function _balanceOf() private view returns (uint256) {
        return providedTokens + tempBalance;
    }

    // returns tempBalance variable. In Biswap's implementation it returns the AutoBsw contract's token balance
    function _available() private view returns (uint256) {
        return tempBalance;
    }

    function _enterStaking(uint256 _amount) private {
        _updatePool();
        if (providedTokens > 0) {
            uint256 pending = ((providedTokens * accEuphPerShare) / PRECISION) - rewardDebt;
            if(pending > 0) {
                uint256 val = _roundPoolValue(pending);
                tempBalance += val;
                totalSupply -= val;
            }
        }
        if(_amount > 0) {
            tempBalance -= _amount;
            totalSupply += _amount;
            providedTokens += _amount;
        }
        rewardDebt = (providedTokens * accEuphPerShare) / PRECISION;
    }

    function _leaveStaking(uint256 _amount) private {
        require(providedTokens >= _amount, "Staking: Error while leaving stake");
        _updatePool();
        uint256 pending = ((providedTokens * accEuphPerShare) / PRECISION) - rewardDebt;
        if(pending > 0) {
            uint256 val = _roundPoolValue(pending);
            tempBalance += val;
            totalSupply -= val;
        }
        if(_amount > 0) {
            providedTokens -= _amount;
            totalSupply -= _amount;
            tempBalance += _amount;
        }
        rewardDebt = (providedTokens * accEuphPerShare) / PRECISION;
    }

    function _updatePool() private {
        if(distributionEnded) return;
        if(block.timestamp <= lastRewardTime || lastRewardTime == (contractDurationInDays * 1 days + startTime) + timeInPause) return;
        
        uint256 supply = providedTokens;

        if (supply <= 0) {
            lastRewardTime = block.timestamp;
            return;
        }

        uint256 passedFiveMinsAmount;

        if (block.timestamp - timeInPause > contractDurationInDays * 1 days + startTime) {
            distributionEnded = true;
            passedFiveMinsAmount = ((contractDurationInDays * 1 days + startTime) - (lastRewardTime - timeInPause)) / 5 minutes;
        } else {
            passedFiveMinsAmount = (block.timestamp - lastRewardTime) / 5 minutes;
        }

        uint256 rewardForPassedMinutes = rewardsPerFiveMins * passedFiveMinsAmount;
        totalSupply += rewardForPassedMinutes;
        accEuphPerShare += (rewardForPassedMinutes * PRECISION) / supply;
        lastRewardTime = block.timestamp - (block.timestamp % 5 minutes);
    }

    // The same as normal updatePool but does not alter the state of contract. Used in calculateReward() call method
    function _updatePoolForCalculation(uint256 _totalSupply, uint256 _accEuphPerShare, uint256 _providedTokens) private view returns(uint256, uint256) {
        uint256 _totalSupplyToReturn = _totalSupply;
        uint256 _accEuphPerShareToReturn = _accEuphPerShare;

        if(distributionEnded) return (_totalSupply, _accEuphPerShare);
        if (block.timestamp <= lastRewardTime || lastRewardTime == (contractDurationInDays * 1 days + startTime) + timeInPause) {
            return (_totalSupply, _accEuphPerShare);
        }
        
        uint256 supply = _providedTokens;

        if (supply <= 0) {
            return (_totalSupply, _accEuphPerShare);
        }

        uint256 passedFiveMinsAmount;

        if (block.timestamp - timeInPause > contractDurationInDays * 1 days + startTime) {
            passedFiveMinsAmount = ((contractDurationInDays * 1 days + startTime) - (lastRewardTime - timeInPause)) / 5 minutes;
        } else {
            passedFiveMinsAmount = (block.timestamp - lastRewardTime) / 5 minutes;
        }

        uint256 rewardForPassedMinutes = rewardsPerFiveMins * passedFiveMinsAmount;
        _totalSupplyToReturn += rewardForPassedMinutes;
        _accEuphPerShareToReturn += (rewardForPassedMinutes * PRECISION) / supply;
        return (_totalSupplyToReturn, _accEuphPerShareToReturn);
    }

    // This method does the same as getUnlockedStakes but alters the contract's state.
    function _getUnlockedStakes(address _stakeHolder) private returns(uint256) {
        uint256 unlockedStakesAmount = 0;
        if(isPrivateStakeHolder(_stakeHolder)) {
            PrivateStakeHolder storage privateSH = privateStakeHoldersInfo[_stakeHolder];
            uint256 monthsSinceDate = _monthsSinceDate(initialLockTime);
            if(monthsSinceDate >= 11) { 
                unlockedStakesAmount = privateSH.lockedStakes;
            } else {
                if(monthsSinceDate > privateSH.lastWithdrawMonth) {
                    uint256 unlockedMonths = monthsSinceDate - privateSH.lastWithdrawMonth;
                    unlockedStakesAmount = unlockedMonths * privateSH.unlockTokensPerMonth;
                }
            }
            privateSH.lastWithdrawMonth = monthsSinceDate;
        }
        return unlockedStakesAmount;
    }

    function _harvest() private {
        if((block.timestamp - lastRewardTime) / 5 minutes <= 0) return; // Return if no 5 minutes passed since last reward time
        _leaveStaking(0);
        _earn();
    }

    //just in case if rounding error causes pool to not have enough EUPHs
    function _roundPoolValue(uint256 _amount) private view returns(uint256) {
        if (_amount > totalSupply) {
            return totalSupply;
        } else {
            return _amount;
        }
    }

    function _earn() private {
        uint256 bal = _available();
        if (bal > 0) {
            _enterStaking(bal);
        }
    }

    function _isContract(address addr) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(addr)
        }
        return size > 0;
    }
}